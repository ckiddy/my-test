apiVersion: scaffolder.backstage.io/v1beta3
# https://backstage.io/docs/features/software-catalog/descriptor-format#kind-template
kind: Template
metadata:
  name: bigC-generate-Template
  title: BigC Generate Template
  description: An template for the scaffolder that creates the application based on BigC framework
spec:
  owner: user:ckiddy
  type: service

  # These parameters are used to generate the input form in the frontend, and are
  # used to gather input data for the execution of the template.
  parameters:
    - title: Fill in some steps
      required:
        - appName
      properties:
        appName:
          title: App Name
          type: string
          description: Unique name of the component
          ui:autofocus: true
          ui:options:
            rows: 5
        appId:
          title: App Id
          type: string
          description: Id of the component
          ui:autofocus: true
          ui:options:
            rows: 5
        lwcVersion:
          title: BigC Version
          type: string
          description: BigC Version of the component
          ui:autofocus: true
          ui:options:
            rows: 5
        appType:
          title: Type of BigC app
          type: string
          description: Type of the component
          description: The volume type to be used
          default: rest
          enum:
            - rest
            - guest
            - standard
          enumNames:
            - 'Rest'
            - 'Guest'
            - 'Standart'
        groupId:
          title: App Group Id
          type: string
          description: GroupId of the component
          ui:autofocus: true
          ui:options:
            rows: 5
        artifactId:
          title: App Artifact Id
          type: string
          description: ArtifactId of the component
          ui:autofocus: true
          ui:options:
            rows: 5
        package:
          title: App Package
          type: string
          description: Package of the component
          ui:autofocus: true
          ui:options:
            rows: 5
        appVersion:
          title: App Version
          type: string
          description: Version of the component
          ui:autofocus: true
          ui:options:
            rows: 5
        appDomain:
          title: App Domain
          type: string
          description: Domain of the component
          ui:autofocus: true
          ui:options:
            rows: 5
        appFilePrefix:
          title: App File Prefix
          type: string
          description: FilePrefix of the component
          ui:autofocus: true
          ui:options:
            rows: 5
    - title: Choose a location
      required:
        - repoUrl
      properties:
        repoUrl:
          title: Repository Location
          type: string
          ui:field: RepoUrlPicker
          ui:options:
            allowedHosts:
              - github.com

  # These steps are executed in the scaffolder backend, using data that we gathered
  # via the parameters above.
  steps:
    # Each step executes an action, in this case one templates files into the working directory.
    - id: fetch-base
      name: Fetch Base
      action: fetch:template
      input:
        url: https://github.com/ckiddy/my-test/tree/main/bigc
        values:
          name: ${{ parameters.appName }}
          groupId: ${{ parameters.groupId }}
          filePrefix: ${{ parameters.appFilePrefix }}
          package: ${{ parameters.package }}

    # This step publishes the contents of the working directory to GitHub.
    - id: publish
      name: Publish
      action: publish:github
      input:
        allowedHosts: ['github.com']
        description: This is ${{ parameters.name }}
        repoUrl: ${{ parameters.repoUrl }}

    # The final step is to register our new component in the catalog.
    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps['publish'].output.repoContentsUrl }}
        catalogInfoPath: '/catalog-info.yaml'

  # Outputs are displayed to the user after a successful execution of the template.
  output:
    links:
      - title: Repository
        url: ${{ steps['publish'].output.remoteUrl }}
      - title: Open in catalog
        icon: catalog
        entityRef: ${{ steps['register'].output.entityRef }}
